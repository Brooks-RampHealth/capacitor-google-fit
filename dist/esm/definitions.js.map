{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAyFA,MAAM,CAAN,IAAY,QAQX;AARD,WAAY,QAAQ;IAClB,uCAA2B,CAAA;IAC3B,yCAA6B,CAAA;IAC7B,yCAA6B,CAAA;IAC7B,+BAAmB,CAAA;IACnB,+BAAmB,CAAA;IACnB,2BAAe,CAAA;IACf,yBAAa,CAAA;AACf,CAAC,EARW,QAAQ,KAAR,QAAQ,QAQnB","sourcesContent":["export interface GoogleFitPlugin {\n  /**\n   * Connect to Google Fit\n   * @returns {Promise}\n   * @resolve any\n   */\n  connectToGoogleFit(): Promise<void>;\n\n  /**\n   * Returns wether the permissions are ok or not\n   * @returns {Promise}\n   * @resolve AllowedResult\n   */\n  isAllowed(): Promise<AllowedResult>;\n\n  /**\n   * Get step history @param bucketSize and @param timeUnit you can define the buckets in which the data is returned\n   * @returns {Promise}\n   * @resolve StepQueryResult\n   */\n  getSteps(call: ExtendedQueryInput): Promise<StepQueryResult>;\n\n  /**\n   * Get weight history\n   * @returns {Promise}\n   * @resolve WeightQueryResult\n   */\n  getWeight(call: QueryInput): Promise<WeightQueryResult>;\n\n  /**\n   * Get Activites, with @param bucketSize and @param timeUnit you can define the minimum length of an activity\n   * @returns {Promise}\n   * @resolve ActivityQueryResult\n   */\n  getActivities(call: ExtendedQueryInput): Promise<ActivityQueryResult>;\n}\n\nexport interface PermissionData {\n  allowed: boolean;\n}\n\nexport interface QueryInput {\n  startTime: Date;\n  endTime: Date;\n}\n\nexport interface ExtendedQueryInput extends QueryInput {\n  bucketSize: number;\n  timeUnit: TimeUnit;\n}\n\n/**\n * The results of a ActivityQuery.\n * The @param value inside of SimpleData has the values representing the Google Fit Constants as the name of the activity\n */\nexport interface ActivityQueryResult {\n  activities: ActivityData[];\n}\n\n/**\n * The results of a WeightQuery.\n * The @param value inside of SimpleData has the unit kilograms\n */\nexport interface WeightQueryResult {\n  weights: SimpleData[];\n}\n\n/**\n * The results of a StepQuery.\n * The @param value inside of SimpleData always represents a count\n */\nexport interface StepQueryResult {\n  steps: SimpleData[];\n}\nexport interface SimpleData {\n  startTime: string;\n  endTime: string;\n  value: number;\n}\n\nexport interface ActivityData extends SimpleData {\n  calories: number;\n  name: string;\n}\n\nexport interface AllowedResult {\n  allowed: boolean;\n}\n\nexport enum TimeUnit {\n  NANOSECONDS = 'NANOSECONDS',\n  MICROSECONDS = 'MICROSECONDS',\n  MILLISECONDS = 'MILLISECONDS',\n  SECONDS = 'SECONDS',\n  MINUTES = 'MINUTES',\n  HOURS = 'HOURS',\n  DAYS = 'DAYS',\n}\n"]}